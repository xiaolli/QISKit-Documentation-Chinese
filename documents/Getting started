入门
QuantumProgram对象是为了编写程序代码的起点。QuantumProgram由量子回路，量子寄存器，传统寄存器构成。QuantumProgram方法能够将这些量子回路发送给用量子计算硬件设施或模拟后端，收集其结果用于更进一步的分析。
以下是在分布式模拟器上运行量子回路的一个例子：
-----------------------------------------------------------------------
from qiskit import QuantumProgram
qp = QuantumProgram()

qr = qp.create_quantum_register('qr', 2)
cr = qp.create_classical_register('cr', 2)
qc = qp.create_circuit('Bell', [qr], [cr])

qc.h(qr[0])
qc.cx(qr[0], qr[1])
qc.measure(qr[0], cr[0])
qc.measure(qr[1], cr[1])

result = qp.execute('Bell')
print(result.get_counts('Bell'))

get_counts方法输出了字典类型的计数结果：{’00': 531, '11': 493}
-----------------------------------------------------------------



量子芯片

可以通过IBM Q（QX） 体验云平台上的量子芯片运行QASM回路。QX上有如下的芯片可以应用：
ibmqx2 ：5 - qubit backend
Ibmqx3 ：16 - qubit backend

详细信息请访问link：IBM Q experience backend information

量子芯片运行案例1:
如下例子代码是在真实的量子设备上运行的量子计算程序：
-----------------------------------------------------------------------------------------
from qiskit import QuantumProgram

#创建第一个量子计算对象实例
Q_program = QuantumProgram()

#设定token令牌
#从链接取得：https://quantumexperience.ng.bluemix.net/qx/account
#在“Personal Access Token”查找
QX_TOKEN = “API_TOKEN”
QX_URL = “https://quantumexperience.ng.bluemix.net/api”

#建立API和可执行程序
#需要token令牌和QX的URL
Q_program.set_api(“QX_TOKEN”,”QX_URL”)

#创建1个2量子比特的量子寄存器，名称：qr
qr = Q_program.create_quanum_register(“qr”,2)

#创建1个2比特的传统寄存器，名称：cr
cr = Q_program.create_classical_register(“cr”,2)

#创建量子回路，名称：qc，使其包括上面创建的 量子寄存器“qr”和传统寄存器“cr”

qc = Q_program.create_circuit(“superposition”,[qr],[cr])

#将量子比特0添加到GATE H用于量子叠加
qc.h(qr[0])

#将对“qr”量子状态的观测结果放入到传统寄存器“cr”
qc.measure(qr,cr)

#指定在“ibmqx2”后端上编译并执行量子回路
result = Q_program.execute([“superposition”],backend = “ibmqx2”,shots = 1024)

#打印结果
print(result)
print(result.get_data(“superposition”))
-----------------------------------------------------------------------------------------

应用IBM Q的量子芯片运行案例1:
应用IBM Q的特征运行下面的代码，实现和上面实例相同的功能。
-----------------------------------------------------------------------------------------
From qiskit import QuantumProgram
#创建第一个量子计算对象实例
Q_program = QuantumProgram()

#设定token令牌
#从链接取得：https://quantumexperience.ng.bluemix.net/qx/account
#在“Personal Access Token”查找
QX_TOKEN = “API_TOKEN”
QX_URL = “https://quantumexperience.ng.bluemix.net/api”
QX_HUB = "MY_HUB"
QX_GROUP = "MY_GROUP"
QX_PROJECT = "MY_PROJECT"

#建立API和可执行程序
#需要token令牌和QX的URL，以及hub/group/project 详细信息
Q_program.set_api(“QX_TOKEN”,”QX_URL”,
                  hub=QX_HUB,
                  group=QX_GROUP,
                  project=QX_PROJECT)

#创建1个2量子比特的量子寄存器，名称：qr
qr = Q_program.create_quanum_register(“qr”,2)

#创建1个2比特的传统寄存器，名称：cr
cr = Q_program.create_classical_register(“cr”,2)

#创建量子回路，名称：qc，使其包括上面创建的 量子寄存器“qr”和传统寄存器“cr”

qc = Q_program.create_circuit(“superposition”,[qr],[cr])

#将量子比特0添加到GATE H用于量子叠加
qc.h(qr[0])

#将对“qr”量子状态的观测结果放入到传统寄存器“cr”
qc.measure(qr,cr)

#指定在“ibmqx2”后端上编译并执行量子回路
result = Q_program.execute([“superposition”],backend = “ibmqx2”,shots = 1024)

#打印结果
print(result)
print(result.get_data(“superposition”))

-----------------------------------------------------------------------------------------



安装IBM Q证书请参照安装篇的3. Configure your API token and QE credentials  


HPC online后端的应用实例
ibmqx_hpc_qasm_simulator  online后端的配置参数如下：
 	•	multi_shot_optimization: 布尔类型 (真 或 假)
 	•	omp_num_threads: 1～16之间的整数.

QuantumProgram的编译(QuantumProgram.compile() )和运行方法(QuantumProgram.execute())的参数可以通过hpc的参数指定。
例如：
-----------------------------------------------------------------------------------------
QP_program.compile(circuits,
                   backend=backend,
                   shots=shots,
                   seed=88,
                   hpc={
                       'multi_shot_optimization': True,
                       'omp_num_threads': 16
                   })
-----------------------------------------------------------------------------------------

当应用ibmqx_hpc_qasm_simulator后端时没有指定hpc参数，将应用如下的缺省值：
-----------------------------------------------------------------------------------------
hpc={
    'multi_shot_optimization': True,
    'omp_num_threads': 16
}
-----------------------------------------------------------------------------------------
这些参数值必须只能在应用ibmqx_hpc_qasm_simulator时使用，如果应用在其他后端的时候，SDK将发出警告并将参数重置为None。

工程目录
example目录：Python的例子
test目录：测试脚本
qiskit目录：SDK模块
